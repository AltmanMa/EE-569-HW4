p1a.m:
folderPath = 'EE569_2024Spring_HW4_materials/test';
newFolderPath = 'test_energy';

rawFiles = dir(fullfile(folderPath, '*.raw'));
numImages = length(rawFiles);
allEnergyFeatures = zeros(numImages, 25);  

L5 = [1 4 6 4 1];
E5 = [-1 -2 0 2 1];
S5 = [-1 0 2 0 -1];
W5 = [-1 2 0 -2 1];
R5 = [1 -4 6 -4 1];

filterBank = {
    conv2(L5', L5), conv2(L5', E5), conv2(L5', S5), conv2(L5', W5), conv2(L5', R5), conv2(E5', L5), conv2(E5', E5), conv2(E5', S5), conv2(E5', W5), conv2(E5', R5), conv2(S5', L5), conv2(S5', E5), conv2(S5', S5), conv2(S5', W5), conv2(S5', R5), conv2(W5', L5), conv2(W5', E5), conv2(W5', S5), conv2(W5', W5), conv2(W5', R5), conv2(R5', L5), conv2(R5', E5), conv2(R5', S5), conv2(R5', W5), conv2(R5', R5)
};
idx = 1;


for file = rawFiles'
    filename = fullfile(folderPath, file.name);
    
    imageData = readraw(filename, 128, 128);
    
    filterResponses = zeros(128, 128, length(filterBank));

    for i = 1:length(filterBank)
        filter = filterBank{i};
        extendedImage = padarray(imageData, [2 2], 'replicate', 'both');
        filterResponses(:, :, i) = conv2(extendedImage, filter, 'valid');
    end
    
    energyFeatures = computeEnergyFeatures(filterResponses); 
    allEnergyFeatures(idx, :) = energyFeatures;
    idx = idx + 1;

     saveFilename = fullfile(netwFolderPath, replace(file.name, '.raw', '_energy.mat'));
     save(saveFilename, 'energyFeatures');  % 或'reducedFeatures'，如果你应用了PCA
end

% [coeff, score, latent, tsquared, explained] = pca(allEnergyFeatures);

% reducedFeatures = score(:, 1:3);
% colors = {'r','r','r','r','r','r','r','r','r', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'b','b','b','b','b','b','b','b','b', 'm','m','m','m','m','m','m','m','m'}.'; 
% markers = {'o','o','o','o','o','o','o','o','o', '+','+','+','+','+','+','+','+','+', '*','*','*','*','*','*','*','*','*', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'}.';
% c = [1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4];
% scatter3(reducedFeatures(:,1), reducedFeatures(:,2), reducedFeatures(:,3), 30, c, 'filled');

% xlabel('Principal Component 1');
% ylabel('Principal Component 2');
% zlabel('Principal Component 3');
% title('3D Feature Space');

% for idx = 1:numImages
%     saveFilename = fullfile(newFolderPath, replace(rawFiles(idx).name, '.raw', '_pca.mat'));
%     pcaFeatures = reducedFeatures(idx, :);
%     save(saveFilename, 'pcaFeatures');
% end
function energyFeatures = computeEnergyFeatures(filterResponses)
    squaredResponses = filterResponses .^ 2;
    
    energyFeatures = zeros(1, size(filterResponses, 3));
    
    for i = 1:size(filterResponses, 3)
        energy = squaredResponses(:, :, i);
        energyFeatures(i) = mean(energy(:));
    end
end



p1b.m:
energyFolderPath = 'test_energy';
pcaFolderPath = 'test_pca'; 

energyFiles = dir(fullfile(energyFolderPath, '*.mat'));

pcaFiles = dir(fullfile(pcaFolderPath, '*.mat'));

allEnergyFeatures = [];
allPCAFeatures = [];

for i = 1:length(energyFiles)
    energyData = load(fullfile(energyFolderPath, energyFiles(i).name));
    energyFeatures = energyData.energyFeatures;
    
    allEnergyFeatures = [allEnergyFeatures; energyFeatures];
end

for i = 1:length(pcaFiles)
    pcaData = load(fullfile(pcaFolderPath, pcaFiles(i).name));
    PCAFeatures = pcaData.pcaFeatures;
    
    allPCAFeatures = [allPCAFeatures; PCAFeatures];
end

K = 4;

% Perform K-means clustering on energy features
label_25 = kmeans(allEnergyFeatures, K);

% Perform K-means clustering on PCA features
label_pca = kmeans(allPCAFeatures, K);

disp('Cluster labels for energy features:');
disp(num2str(label_25'));


disp('Cluster labels for PCA features:');
disp(num2str(label_pca'));

p1c.m:
trainEnergyFolderPath = 'train_energy';
trainPCAFolderPath = 'train_pca'; 
testEnergyFolderPath = 'test_energy'; 
testPCAFolderPath = 'test_pca'; 

trainLabels = [ones(9, 1); 2 * ones(9, 1); 3 * ones(9, 1); 4 * ones(9, 1)];

testLabels = [2 1 3 2 1 4 1 4 3 3 4 2 ];

% Initialize arrays to store predicted labels
predictedLabels25D = zeros(length(testLabels), 1);
predictedLabels3D = zeros(length(testLabels), 1);

% Train and predict using 25-D features
trainFeatures25D = [];
trainFiles25D = dir(fullfile(trainEnergyFolderPath, '*.mat'));
for i = 1:length(trainFiles25D)
    trainData = load(fullfile(trainEnergyFolderPath, trainFiles25D(i).name));
    trainFeatures25D = [trainFeatures25D; trainData.energyFeatures];
end

% Train SVM model
template = templateSVM('Standardize', true, 'KernelFunction','gaussian', 'SaveSupportVectors', true);

svmModel25D = fitcecoc(trainFeatures25D, trainLabels, 'Learners', template);

% Load and predict using test features
testFiles25D = dir(fullfile(testEnergyFolderPath, '*.mat'));
for i = 1:length(testFiles25D)
    testData = load(fullfile(testEnergyFolderPath, testFiles25D(i).name));
    testFeatures25D = testData.energyFeatures;
    predictedLabels25D(i) = predict(svmModel25D, testFeatures25D);
end

% Calculate error rate for 25-D features
errorRate25D = sum(predictedLabels25D ~= testLabels) / length(testLabels);
disp(['Error rate for 25-D features: ', num2str(errorRate25D)]);

% Train and predict using reduced 3-D features via PCA
trainFeatures3D = [];
trainFiles3D = dir(fullfile(trainPCAFolderPath, '*.mat'));
for i = 1:length(trainFiles3D)
    trainData = load(fullfile(trainPCAFolderPath, trainFiles3D(i).name));
    trainFeatures3D = [trainFeatures3D; trainData.pcaFeatures];
end

% Train SVM model
svmModel3D = fitcecoc(trainFeatures3D, trainLabels, 'Learners', template);

% Load and predict using test features
testFiles3D = dir(fullfile(testPCAFolderPath, '*.mat'));
for i = 1:length(testFiles3D)
    testData = load(fullfile(testPCAFolderPath, testFiles3D(i).name));
    testFeatures3D = testData.pcaFeatures;
    predictedLabels3D(i) = predict(svmModel3D, testFeatures3D);
end

% Calculate error rate for 3-D features via PCA
errorRate3D = sum(predictedLabels3D ~= testLabels) / length(testLabels);
disp(['Error rate for 3-D features via PCA: ', num2str(errorRate3D)]);


p2a.m:
image = imread('EE569_2024Spring_HW4_materials/composite.png'); 

if size(image, 3) == 3
    image = rgb2gray(image);
end

L5 = [1 4 6 4 1];
E5 = [-1 -2 0 2 1];
S5 = [-1 0 2 0 -1];
W5 = [-1 2 0 -2 1];
R5 = [1 -4 6 -4 1];

filterBank = {
    conv2(L5', L5), conv2(L5', E5), conv2(L5', S5), conv2(L5', W5), conv2(L5', R5), conv2(E5', L5), conv2(E5', E5), conv2(E5', S5), conv2(E5', W5), conv2(E5', R5), conv2(S5', L5), conv2(S5', E5), conv2(S5', S5), conv2(S5', W5), conv2(S5', R5), conv2(W5', L5), conv2(W5', E5), conv2(W5', S5), conv2(W5', W5), conv2(W5', R5), conv2(R5', L5), conv2(R5', E5), conv2(R5', S5), conv2(R5', W5), conv2(R5', R5)
};

[numRows, numCols] = size(image);
numFilters = length(filterBank);
energyFeatures = zeros(numRows, numCols, numFilters);

for i = 1:numFilters
    filterResponse = abs(conv2(double(image), filterBank{i}, 'same'));
    energyFeatures(:, :, i) = filterResponse;
end


windowSize = 10; 
energyMap = zeros(numRows, numCols, numFilters);
for i = 1:numFilters
    energyMap(:, :, i) = conv2(energyFeatures(:, :, i).^2, ones(windowSize)/(windowSize^2), 'same');
end


L5TL5_energy = energyMap(:, :, 1); 
normalizedEnergyMap = energyMap;
for i = 1:numFilters
    if i ~= 1 
        normalizedEnergyMap(:, :, i) = energyMap(:, :, i) ./ (L5TL5_energy + eps);
    end
end

numTextures = 5; 
normalizedEnergyMap24 = normalizedEnergyMap(: , : , 2:end);
features = reshape(normalizedEnergyMap, [], numFilters);
[~, centroids] = kmeans(features, numTextures, 'MaxIter', 2000); 
centroids = double(centroids);

idx = dsearchn(centroids, features); 
segmented_image = reshape(idx, numRows, numCols); 

figure;
imagesc(segmented_image);
colormap(jet(numTextures)); 
colorbar;
title('Segmented Image');


p2b.m:
image = imread('EE569_2024Spring_HW4_materials/composite.png'); % 读取图像，假设图像已经存储在当前目录下

if size(image, 3) == 3
    image = rgb2gray(image);
end

L5 = [1 4 6 4 1];
E5 = [-1 -2 0 2 1];
S5 = [-1 0 2 0 -1];
W5 = [-1 2 0 -2 1];
R5 = [1 -4 6 -4 1];

filterBank = {
    conv2(L5', L5), conv2(L5', E5), conv2(L5', S5), conv2(L5', W5), conv2(L5', R5), conv2(E5', L5), conv2(E5', E5), conv2(E5', S5), conv2(E5', W5), conv2(E5', R5), conv2(S5', L5), conv2(S5', E5), conv2(S5', S5), conv2(S5', W5), conv2(S5', R5), conv2(W5', L5), conv2(W5', E5), conv2(W5', S5), conv2(W5', W5), conv2(W5', R5), conv2(R5', L5), conv2(R5', E5), conv2(R5', S5), conv2(R5', W5), conv2(R5', R5)
};

[numRows, numCols] = size(image);
numFilters = length(filterBank);
energyFeatures = zeros(numRows, numCols, numFilters);

% 1. Filter bank response computation
for i = 1:numFilters
    filterResponse = abs(conv2(double(image), filterBank{i}, 'same'));
    energyFeatures(:, :, i) = filterResponse;
end

% 2. Energy feature computation
windowSize = 10; 
energyMap = zeros(numRows, numCols, numFilters);
for i = 1:numFilters
    energyMap(:, :, i) = conv2(energyFeatures(:, :, i).^2, ones(windowSize)/(windowSize^2), 'same');
end

% 3. Energy feature normalization
L5TL5_energy = energyMap(:, :, 1); 
normalizedEnergyMap = energyMap;
for i = 1:numFilters
    if i ~= 1 
        normalizedEnergyMap(:, :, i) = energyMap(:, :, i) ./ (L5TL5_energy + eps); 
    end
end

% PCA for feature reduction
numComponents = 10; 
numTextures = 5; 

features_flattened = reshape(normalizedEnergyMap, [], numFilters); 
coeff = pca(features_flattened); 
features_reduced = features_flattened * coeff(:, 1:numComponents); 


[~, centroids] = kmeans(features_reduced, numTextures, 'MaxIter', 2000); 
centroids = double(centroids);

idx = dsearchn(centroids, features_reduced); 
segmented_image = reshape(idx, numRows, numCols); 

minRegionSize = 10000; 
regionProps = regionprops(segmented_image, 'Area');
for i = 1:length(regionProps)
    if regionProps(i).Area < minRegionSize
        segmented_image(segmented_image == i) = mode(segmented_image(:)); 
    end
end

threshold = 0.5;
adjacentRegions = bwperim(segmented_image);

adjacentTextureFeatures = zeros(size(adjacentRegions, 1), numComponents);
for i = 1:size(adjacentRegions, 1)
    [row, col] = find(adjacentRegions(i, :));
    regionFeatures = features_reduced(sub2ind([numRows, numCols], row, col), :);
    adjacentTextureFeatures(i, :) = mean(regionFeatures, 1);
end

for i = 1:size(adjacentRegions, 1)
    [row, col] = find(adjacentRegions(i, :));
    for j = 1:length(row)
        regionIdx = segmented_image(row(j), col(j));
        
        adjacentTexture = adjacentTextureFeatures(i, :);
        
        currentTexture = features_reduced(sub2ind([numRows, numCols], row(j), col(j)), :);
        
        similarity = pdist2(currentTexture, adjacentTexture, 'euclidean');
        
        if similarity < threshold 
            segmented_image(row(j), col(j)) = mode(segmented_image(:));
        end
    end
end

figure;
imagesc(segmented_image);
colormap(jet(numTextures)); 
colorbar;
title('Segmented Image');


p3b.m:
Cat1 = imread('EE569_2024Spring_HW4_materials/cat_1.png');
Cat2 = imread('EE569_2024Spring_HW4_materials/cat_2.png');
Cat3 = imread('EE569_2024Spring_HW4_materials/cat_3.png');
Dog1 = imread('EE569_2024Spring_HW4_materials/dog_1.png');

Cat1_gray = rgb2gray(Cat1);
Cat2_gray = rgb2gray(Cat2);
Cat3_gray = rgb2gray(Cat3);
Dog1_gray = rgb2gray(Dog1);

[f1, d1] = vl_sift(single(Cat1_gray));
[f2, d2] = vl_sift(single(Cat2_gray));
[f3, d3] = vl_sift(single(Cat3_gray));
[f4, d4] = vl_sift(single(Dog1_gray));

%do the matches for the four pairs
[matches1, scores1] = vl_ubcmatch(d1, d3);
[matches2, scores2] = vl_ubcmatch(d3, d2);
[matches3, scores3] = vl_ubcmatch(d4, d3);
[matches4, scores4] = vl_ubcmatch(d1, d4);

%find max scale point in Cat1
[max_scale1, max_scale_idx1] = max(f1(3, :)); 
max_scale_keypoint1 = f1(1:2, max_scale_idx1); 

distances1 = pdist2(max_scale_keypoint1', f3(1:2, :)'); 
[min_dist1, min_dist_idx1] = min(distances1); 
closest_neighbor_keypoint3 = f3(1:2, min_dist_idx1); 

figure;
subplot(1, 2, 1);
imshow(Cat1);
hold on;
plot(max_scale_keypoint1(1), max_scale_keypoint1(2), 'r*');
title('Key Point with max scale in Cat1');

subplot(1, 2, 2);
imshow(Cat3);
hold on;
plot(closest_neighbor_keypoint3(1), closest_neighbor_keypoint3(2), 'r*');
title('closest neighboring key point in Cat_3');

figure;
subplot(1,2,1);
imshow(Cat1);
title('Cat1');
hold on;
plot(f1(1,matches1(1,:)),f1(2,matches1(1,:)),'ro');
subplot(1,2,2);
imshow(Cat3);
title('Cat3');
hold on;
plot(f3(1,matches1(2,:)),f3(2,matches1(2,:)),'ro');

%find max scale point in Cat3
[max_scale3, max_scale_idx3] = max(f3(3, :)); 
max_scale_keypoint3 = f3(1:2, max_scale_idx3); 

distances3 = pdist2(max_scale_keypoint3', f2(1:2, :)'); 
[min_dist3, min_dist_idx3] = min(distances3); 
closest_neighbor_keypoint2 = f2(1:2, min_dist_idx3); 

figure;
subplot(1, 2, 1);
imshow(Cat3);
hold on;
plot(max_scale_keypoint3(1), max_scale_keypoint3(2), 'r*');
title('Key Point with max scale in Cat3');

subplot(1, 2, 2);
imshow(Cat2);
hold on;
plot(closest_neighbor_keypoint2(1), closest_neighbor_keypoint2(2), 'r*');
title('closest neighboring key point in Cat_2');

figure;
subplot(1,2,1);
imshow(Cat3);
title('Cat3');
hold on;
plot(f3(1,matches2(1,:)),f3(2,matches2(1,:)),'ro');
subplot(1,2,2);
imshow(Cat2);
title('Cat2');
hold on;
plot(f2(1,matches2(2,:)),f2(2,matches2(2,:)),'ro');

%find max scale point in Dog1
[max_scale4, max_scale_idx4] = max(f4(3, :)); 
max_scale_keypoint4 = f4(1:2, max_scale_idx4); 

distances4 = pdist2(max_scale_keypoint3', f3(1:2, :)'); 
[min_dist4, min_dist_idx4] = min(distances4); 
closest_neighbor_keypoint34 = f3(1:2, min_dist_idx4); 

figure;
subplot(1, 2, 1);
imshow(Dog1);
hold on;
plot(max_scale_keypoint4(1), max_scale_keypoint4(2), 'r*');
title('Key Point with max scale in Dog1');

subplot(1, 2, 2);
imshow(Cat3);
hold on;
plot(closest_neighbor_keypoint34(1), closest_neighbor_keypoint34(2), 'r*');
title('closest neighboring key point in Cat_3');

figure;
subplot(1,2,1);
imshow(Dog1);
title('Dog1');
hold on;
plot(f4(1,matches3(1,:)),f4(2,matches3(1,:)),'ro');
subplot(1,2,2);
imshow(Cat3);
title('Cat3');
hold on;
plot(f3(1,matches3(2,:)),f3(2,matches3(2,:)),'ro');

%find max scale point in Dog1

distances41 = pdist2(max_scale_keypoint1', f4(1:2, :)'); 
[min_dist41, min_dist_idx41] = min(distances41); 
closest_neighbor_keypoint14 = f4(1:2, min_dist_idx41); 

figure;
subplot(1, 2, 1);
imshow(Cat1);
hold on;
plot(max_scale_keypoint1(1), max_scale_keypoint1(2), 'r*');
title('Key Point with max scale in Cat1');

subplot(1, 2, 2);
imshow(Dog1);
hold on;
plot(closest_neighbor_keypoint14(1), closest_neighbor_keypoint14(2), 'r*');
title('closest neighboring key point in Dog1');

figure;
subplot(1,2,1);
imshow(Cat1);
title('Cat1');
hold on;
plot(f1(1,matches4(1,:)),f1(2,matches4(1,:)),'ro');
subplot(1,2,2);
imshow(Dog1);
title('Dog1');
hold on;
plot(f4(1,matches4(2,:)),f4(2,matches4(2,:)),'ro');

p3c.m:
Cat1 = imread('EE569_2024Spring_HW4_materials/cat_1.png');
Cat2 = imread('EE569_2024Spring_HW4_materials/cat_2.png');
Cat3 = imread('EE569_2024Spring_HW4_materials/cat_3.png');
Dog1 = imread('EE569_2024Spring_HW4_materials/dog_1.png');

Cat1 = single(rgb2gray(Cat1));
Cat2 = single(rgb2gray(Cat2));
Cat3 = single(rgb2gray(Cat3));
Dog1 = single(rgb2gray(Dog1));

[f_cat1, d_cat1] = vl_sift(Cat1);
[f_cat2, d_cat2] = vl_sift(Cat2);
[f_cat3, d_cat3] = vl_sift(Cat3);
[f_dog1, d_dog1] = vl_sift(Dog1);

all_sift_features = [d_cat1'; d_cat2'; d_cat3'; d_dog1'];

num_clusters = 8;
[cluster_indices, centroids] = kmeans(double(all_sift_features), num_clusters);

codewords_cat1 = histcounts(cluster_indices(1:size(d_cat1, 2)), 1:num_clusters+1);
codewords_cat2 = histcounts(cluster_indices(size(d_cat1, 2)+1:size(d_cat1, 2)+size(d_cat2, 2)), 1:num_clusters+1);
codewords_cat3 = histcounts(cluster_indices(size(d_cat1, 2)+size(d_cat2, 2)+1:size(d_cat1, 2)+size(d_cat2, 2)+size(d_cat3, 2)), 1:num_clusters+1);
codewords_dog1 = histcounts(cluster_indices(size(d_cat1, 2)+size(d_cat2, 2)+size(d_cat3, 2)+1:end), 1:num_clusters+1);


similarity_to_cat1 = norm(codewords_cat3 - codewords_cat1);
similarity_to_cat2 = norm(codewords_cat3 - codewords_cat2);
similarity_to_dog1 = norm(codewords_cat3 - codewords_dog1);

disp('Similarity of Cat_3 codewords to other images:');
disp(['Similarity to Cat_1: ', num2str(similarity_to_cat1)]);
disp(['Similarity to Cat_2: ', num2str(similarity_to_cat2)]);
disp(['Similarity to Dog_1: ', num2str(similarity_to_dog1)]);


